#! /usr/bin/env python
#coding: utf-8

helptext="""
This script is for BLASTping against multiple databases
Authors: David Peris UW-Madison, Dept Genetics & IATA-CSIC
"""

import sys,os
import argparse
import pandas as pd
from Bio import SeqIO

parser = argparse.ArgumentParser(description=helptext,formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("-i","--input", help="can be a fasta file or a text file with the names of protein fasta to parse", type = str, default = None)
parser.add_argument("-o","--output", help="is the path to your folder where outputfiles will be saved", type = str, default = None)
parser.add_argument("-b","--blast", help="is the file with blast databases names", type = str, default = None)
parser.add_argument("-d","--database", help="is the folder where blast databases are stored", type = str, default = None)
parser.add_argument("-l","--listProt", help="a list with StrainName and path2Protein collection generated by an annotation pipeline", type = str, default = None)

args = parser.parse_args()

input_file = args.input
output_folder = args.output
blast_list = args.blast
blast_folder = args.database

if not os.path.exists(output_folder):
	os.makedirs(output_folder)
strainFasta_outputs = output_folder + 'fastas_individual/'
if not os.path.exists(strainFasta_outputs):
	os.makedirs(strainFasta_outputs)

proteinCollection = pd.read_csv(args.listProt, sep = "\t", header = None)

if 'fas' in input_file.split('.')[1]:
	fasta_file = input_file
	fastaName = fasta_file.split('/')[-1].split('.')[0]
	output_folderF = output_folder+ "/"+fastaName+"/"
	if not os.path.exists(output_folderF):
		os.makedirs(output_folderF)
	databases = open(blast_list)
	for yeast in databases:
		run_all_db = 'blastn -db ' + blast_folder
		run_all_db += yeast.strip()
		run_all_db += ' -query '
		run_all_db += fasta_file # query fasta file
		run_all_db += ' -out '+ output_folderF + "/" +yeast.strip()+'_'+fastaName+'.txt'
		run_all_db += ' -outfmt \'6 qseqid sseqid evalue  qcovs sseq\' -evalue 0.01'
		print(yeast.strip()+" blastp:"+run_all_db)
		os.system(run_all_db)
		blast_file = open(output_folderF + "/" +yeast.strip()+'_'+fastaName+'.txt', 'r')
		list_fastaExtract = open(output_folderF + "/" +yeast.strip()+'_proteins2Extract.txt','w')
		wanted = []
		for iLine in blast_file:
			iLine = iLine.split('/')
			if int(iLine[3]) > 75:
				list_fastaExtract.write(iLine[1]+"\n")
				wanted.append(iLine[1])
		blast_file.close()
		list_fastaExtract.close()
		print("filtering files for:" + yeast.strip())
		output_file = output_folderF + "/" +yeast.strip()+"_"+fastaName+".fas"
		path2Proteins = proteinCollection.loc[proteinCollection[0] == yeast.strip()][1].iloc[0]
		records = (r for r in SeqIO.parse(path2Proteins, "fasta") if r.id in wanted)
		SeqIO.write(records, output_file, "fasta")
		print("sed 's|>|>"+yeast.strip()+"|g' "+output_file)
		os.system("sed 's|>|>"+yeast.strip()+"|g' "+output_file)
else:
	fasta_list = open(input_file)
	for gene_file in fasta_list:
		fasta_file = gene_file.strip()
		fastaName = fasta_file.split('/')[-1].split('.')[0]
		output_folderF = output_folder+ "/"+fastaName+"/"
		if not os.path.exists(output_folderF):
			os.makedirs(output_folderF)
		databases = open(blast_list)
		for yeast in databases:
			run_all_db = 'blastn -db ' + blast_folder
			run_all_db += yeast.strip()
			run_all_db += ' -query '
			run_all_db += fasta_file # query fasta file
			run_all_db += ' -out '+ output_folderF + "/" + yeast.strip()+'_'+fastaName+'.txt'
			run_all_db += ' -outfmt \'6 qseqid sseqid evalue  qcovs sseq\' -evalue 0.01'
			print(yeast+" blastp:"+run_all_db)
			os.system(run_all_db)
			blast_file = open(output_folderF + "/" +yeast.strip()+'_'+fastaName+'.txt', 'r')
			list_fastaExtract = open(output_folderF + "/" +yeast.strip()+'_proteins2Extract.txt','w')
			wanted = []
			for iLine in blast_file:
				iLine = iLine.split('/')
				if int(iLine[3]) > 75:
					list_fastaExtract.write(iLine[1]+"\n")
					wanted.append(iLine[1])
			blast_file.close()
			list_fastaExtract.close()
			print("filtering files for:" + yeast.strip())
			output_file = output_folderF + "/" +yeast.strip()+"_"+fastaName+".fas"
			path2Proteins = proteinCollection.loc[proteinCollection[0] == yeast.strip()][1].iloc[0]
			records = (r for r in SeqIO.parse(path2Proteins, "fasta") if r.id in wanted)
			SeqIO.write(records, output_file, "fasta")
			print("sed 's|>|>"+yeast.strip()+"|g' "+output_file)
			os.system("sed 's|>|>"+yeast.strip()+"|g' "+output_file)

print("DONE!")